export default `import mongoose from "mongoose";import moment from "moment";import _ from "lodash";import { getDateQuery } from "../util/utils";import Car, { CarModel } from "./Car";import Task, { TaskModel } from "./Task";import Order, { OrderModel } from "./Order";export enum CarScheduleStatus {active = "ACTIVE",archived = "ARCHIVED"}export type CarScheduleModel = mongoose.Document & {car: CarModel,start: Date,end: Date,task: TaskModel,order: OrderModel,status: CarScheduleStatus};const carScheduleSchema = new mongoose.Schema({ car: { type: mongoose.Schema.Types.ObjectId, ref: "Car" }, start: Date, end: Date, task: { type: mongoose.Schema.Types.ObjectId, ref: "Task" }, order: { type: mongoose.Schema.Types.ObjectId, ref: "Order"},status: { type: String, enum: _.values(CarScheduleStatus), default: CarScheduleStatus.active}}, { timestamps: true }); carScheduleSchema.statics.findBetween = function (startDate: Date, endDate: Date) {return CarSchedule.aggregate([{$match: { $or:[{status: CarScheduleStatus.active,$and: [{ order: { $exists: true } },getDateQuery(startDate,endDate,"start","en)] },{status: CarScheduleStatus.active,$and: [{ order: { $exists: false } },getDateQuery(startDate, endDate, "start", "end")]},]},},{$group: { _id: undefined, busy: { $push: "$car" } }},{$project: { busy: true, _id: false }}]); };const CarSchedule = mongoose.model<CarScheduleModel>("CarSchedule", Ñ‚carScheduleSchema); export default CarSchedule;`
